@using DevelopmentMetrics.Cards
@model DevelopmentMetrics.Website.Models.CardsViewModel
@{
    ViewBag.Title = "Cards";

    var @metrics = @Model.GetCardCountByStatus();
}

<script type="text/javascript" src="https://www.google.com/jsapi"> </script>

<div class="row">
    <h2>Card metrics</h2>
</div>
<div class="row">
    <div class="col-md-4">
        <p>
            Lead time (in days): @Model.CalculateLeadTime()
        </p>
    </div>
    <div class="col-md-4">
        <p>
            Todo: @metrics[CardStatus.Status.Todo]
        </p>
    </div>
    <div class="col-md-4">
        <p>
            In progress: @metrics[CardStatus.Status.Doing]
        </p>
    </div>
</div>
<div class="row">
    &nbsp;
</div>
<div class="row">
    <div id="CardChart" style="border: 1px solid #999;"></div>
</div>

<script type="text/javascript">
    google.load("visualization", "1",
    {
        packages: ["corechart"]
    });

    google.setOnLoadCallback(drawChart);

    function drawChart() {
        $.ajax({
            url: '@Url.Action("GetCardCountByDay","Cards")',
            dataType: "json",
            data: {},
            type: "GET",
            error: function (xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.message);
            },
            beforeSend: function () {
                //todo - show loading
            },
            success: function (data) {
                renderChartData(data);
            },
            complete: function () {
                //todo - hide loading
            }
        });

        return false;
    };

    function renderChartData(data) {
        $("#CardChart").show();

        var dataTable = new google.visualization.DataTable();
        dataTable.addColumn('date', 'day');
        dataTable.addColumn('number', 'DoneTotal');
        dataTable.addColumn('number', 'Total');

        $.each(data,
            function (i, item) {
                dataTable.addRows([[new Date(getDateIfDate(item.Date)), item.DoneTotal, item.Total]]);
            });

        var minValue = dataTable.getFormattedValue(0, 2) - 30;

        var options = {
            title: 'Cumulative flow diagram',
            titleTextStyle: {
                italic: false,
                color: '#00BBF1',
                fontSize: '20'
            },
            height: 650,
            pointSize: 3,
            curveType: 'function',
            chartArea: {
                top: 50
            },
            legend:
            {
                position: 'bottom',
                textStyle:
                {
                    color: '#666'
                }
            },
            colors: ['#34A853', 'ff6600', '#FBBC05'],
            hAxis:
            {
                title: 'Time (days)',
                titleTextStyle:
                {
                    italic: false,
                    color: '#00BBF1',
                    fontSize: '20'
                },
                textStyle:
                {
                    color: '#666'
                },
                format: 'dd MMM'
            },
            vAxis:
            {
                baselineColor: '#f5f5f5',
                title: 'Number of items',
                titleTextStyle:
                {
                    color: '#00BBF1',
                    italic: false,
                    fontSize: '20'
                },
                textStyle:
                {
                    color: '#666'
                },
                viewWindow:
                {
                    min: minValue,
                    format: 'long'
                }
            }
        };
        var chart = new google.visualization.LineChart(document.getElementById('CardChart'));
        chart.draw(dataTable, options);

        return false;
    }

    function getDateIfDate(d) {
        var m = d.match(/\/Date\((\d+)\)\//);
        return m
            ? (new Date(+m[1])).toString('dd/MM/yyyy')
            : d;
    };
</script>
